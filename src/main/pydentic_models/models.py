from pydantic import BaseModel, Field
from typing import List, Optional
from langchain.output_parsers import ResponseSchema

class ChatRequest(BaseModel):
    user_id: str
    user_question: str
    summary: str  # Could be a running string summary or memory summary

class ChatResponse(BaseModel):
    user_id: str
    user_question: str
    ai_response: dict

class FeedbackRequest(BaseModel):
    user_id: Optional[str]
    query: str
    response: str
    rating: Optional[int]  # 1-5 stars
    notes: Optional[str]

class RAGRequest(BaseModel):
    symptoms: str
    image_path: str = None

class RAGResponse(BaseModel):
    diagnosis: str
    references: list

class DTQueryRequest(BaseModel):
    query: str
    top_k: int = 5

class DTQueryResponse(BaseModel):
    results: list
    success: bool
    message: str

from pydantic import BaseModel
from typing import List, Optional

class MChatRequest(BaseModel):
    user_id: str
    user_question: str

class MChatResponse(BaseModel):
    user_id: str = Field(description="The unique identifier for the user")
    user_question: str = Field(description="The question asked by the user")
    assistant_response: str = Field(description="The response provided by the assistant")
    source_documents: List[str] = Field(default_factory=list, description="List of source documents used for RAG")
    rag_used: bool = Field(default=False, description="Whether RAG was used for this response")
    chat_id: Optional[str] = Field(default=None, description="The unique identifier for this chat exchange")

class FeedbackRequest(BaseModel):
    user_id: Optional[str] = None
    query: str
    response: str
    rating: Optional[int] = None
    feedback_text: str

class DiagnosisRequest(BaseModel):
    user_id: Optional[str] = None
    symptoms: str
    age: Optional[int] = None
    gender: Optional[str] = None
    medical_history: Optional[str] = None

class DiagnosisResponse(BaseModel):
    user_id: Optional[str] = None
    symptoms: str
    diagnosis: str
    possible_conditions: List[str]
    recommendations: List[str]
    confidence: float
    disclaimer: str
    
response_schemas = [
    ResponseSchema(name="answer", description="Direct, user-friendly response to the question."),
    ResponseSchema(name="suggestion", description="Optional health or safety advice."),
    ResponseSchema(name="urgency", description="Level of urgency: low, medium, or high.")
]

response_schemas_rag = [
    ResponseSchema(name="user_id", description="Unique identifier for the user."),
    ResponseSchema(name="user_question", description="The question asked by the user."),
    ResponseSchema(name="assistant_response", description="The response generated by the assistant."),
    ResponseSchema(name="source_documents", description="List of documents used as references for the response."),
    ResponseSchema(name="rag_used", description="Indicates whether Retrieval-Augmented Generation (RAG) was used.")
]